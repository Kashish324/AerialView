@model ListDataViewModel
@using Newtonsoft.Json
@using System.Web

@{
    ViewData["Title"] = @Model.ChildMenuName;
    Layout = null;
}


<div id="dataTable" class="position-relative shadow rounded" data-table-name="@Model.TableName" data-child-menu-name="@Model.ChildMenuName">
    @if (Model.TableData == null || !Model.TableData.Any())
    {
        <div id="loadingSpinnerContainer" class="h-100 w-100 d-flex align-items-center justify-content-center">
            <div id="loadingSpinner" class="d-none">
                <div class="spinner-grow text-primary-emphasis" role="status" style="width: 1.5rem; height: 1.5rem; animation-duration: 1s;">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <p id="noDataMessage" class="text-body-secondary fw-medium">No data to show</p>
            <p id="errorMessage" class="text-danger fw-medium d-none">There was an issue accessing the database.</p>
        </div>
    }
    else
    {
        <div class="datagridWrapper bg-light bg-gradient rounded-top">
            @(
                Html.DevExtreme().DataGrid()
                .ID("dataGridContainer")
                .ShowBorders(true)
                .ColumnMinWidth(60)
                .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Standard))
                .DataSource(Model.TableData)
                .FilterRow(filterRow => filterRow
                .Visible(true)
                .ApplyFilter(GridApplyFilterMode.Auto)
                )
                .StateStoring(s => s
                .Enabled(true)
                .Type(StateStoringType.LocalStorage)
                .StorageKey("storage")
                )
                .ColumnAutoWidth(true)
                .AllowColumnReordering(true)
                .AllowColumnResizing(true)
                .ColumnResizingMode(ColumnResizingMode.Widget)
                .ShowColumnLines(true)
                .ShowRowLines(true)
                .ColumnChooser(c => c.Enabled(true))
                .ColumnFixing(c => c.Enabled(true))
                .WordWrapEnabled(true)
                .HoverStateEnabled(true)
                .HeaderFilter(hf => hf
                .Visible(true)
                .Search(hfs => hfs.Enabled(true))
                )
                .GroupPanel(g => g.Visible(true))
                .Grouping(g => g.AutoExpandAll(false))
                .Columns(c =>
                {
                    if (Model.TableData != null && Model.TableData.Any() && Model.ConditionalTableData != null)
                    {
                        var firstItem = Model.TableData.FirstOrDefault() as IDictionary<string, object>;

                        if (firstItem != null)
                        {
                            foreach (var i in Model.ConditionalTableData)
                            {
                                foreach (var property in firstItem.Keys)
                                {
                                    if (property == i.ColumnName)
                                    {
                                        if (property == "DateAndTime")
                                        {
                                            c.Add().DataField(property).Caption(i.DisplayName).DataType(GridColumnDataType.DateTime).Format("dd-MM-yyyy HH:mm:ss")
                                            .CssClass("datagridCol")
                                            .AllowHiding(false);
                                        }
                                        else
                                        {
                                            c.Add().DataField(property).Caption(i.DisplayName)
                                            .CssClass("datagridCol");
                                        }
                                    }
                                }
                            }

                        }
                    }
                })
                .ShowColumnHeaders(true)
                .Pager(pager =>
                {
                    pager.Visible(true);
                    pager.DisplayMode(GridPagerDisplayMode.Compact);
                    pager.ShowPageSizeSelector(true);
                    pager.AllowedPageSizes(new JS("[5, 10, 'all']"));
                    pager.ShowInfo(true);
                    pager.ShowNavigationButtons(true);
                })

                .Paging(paging =>
                {
                    paging.Enabled(true);
                    paging.PageSize(10);
                })
                )
        </div>

        <div class="exportBtn position-sticky bg-white d-flex justify-content-end align-items-center gap-2 border-top">
            <div id="exportOrientation" class="ms-2">
                <div class="input-group input-group-sm">
                    <label class="input-group-text" for="pdfOrientationSelect"><i class="bi bi-printer"></i></label>
                    <select id="pdfOrientationSelect" class="form-select form-select-sm" aria-label="Small select example" style="cursor: pointer !important;">
                        <option value="landscape" selected>Landscape</option>
                        <option value="portrait">Portrait</option>
                    </select>
                </div>
            </div>


            <button title="Export To Excel" id="excelExportButton" class="btn btn-sm  text-decoration-none text-dark p-0">
                <i class="ri-file-excel-2-line fs-3 shadow-sm" style="color: #1D6F42;"></i>
                @* <i class="ri-file-excel-2-line fs-3 shadow-sm text-success"></i> *@
            </button>
            <button title="Export To PDF" id="pdfExportButton" class="btn btn-sm text-decoration-none text-dark p-0">
                <i class="ri-file-pdf-2-line fs-3 shadow-sm" style="color: #F40F02;"></i>
                @* <i class="ri-file-pdf-2-line fs-3 shadow-sm text-danger"></i> *@
            </button>

        </div>
    }
</div>



<script>
    function showLoadingSpinner() {
        $("#loadingSpinner").removeClass("d-none");
        $("#noDataMessage").addClass("d-none");
        $("#errorMessage").addClass("d-none");
    }

    function hideLoadingSpinner() {
        $("#loadingSpinner").addClass("d-none");
    }

    function showNoDataMessage() {
        $("#noDataMessage").removeClass("d-none");
        $("#loadingSpinner").addClass("d-none");
        $("#errorMessage").addClass("d-none");
    }

    function showErrorMessage() {
        $("#errorMessage").removeClass("d-none");
        $("#loadingSpinner").addClass("d-none");
        $("#noDataMessage").addClass("d-none");
    }

    var excelExportBtn = document.getElementById('excelExportButton');
    var pdfExportBtn = document.getElementById('pdfExportButton');
    var pdfOrientationSelect = document.getElementById('pdfOrientationSelect');


    if (excelExportBtn) {
        excelExportBtn.addEventListener('click', function (event) {
            exportGridToExcel(event);
        });
    }

    if (pdfExportBtn) {
        pdfExportBtn.addEventListener('click', function (event) {
            exportGridToPdf(event);
        });
    }

    var tableData = @Html.Raw(Json.Serialize(Model.TableData));
    var clientData = @Html.Raw(Json.Serialize(Model.PdfImageData));

    // Get the current date and time
    var date = new Date();
    var formattedDate = date.getDate() + '-' + date.getMonth() + '-' + date.getFullYear();
    var formattedTime = date.getHours() + '' + date.getMinutes() + '' + date.getSeconds();

    // Export grid data to Excel
    function exportGridToExcel(e) {
        var tableName = document.getElementById('dataTable').getAttribute('data-table-name');
        var childMenuName = document.getElementById('dataTable').getAttribute('data-child-menu-name');

        // DataGrid instance
        var dataGridElement = document.getElementById("dataGridContainer");
        var dataGridInstance = DevExpress.ui.dxDataGrid.getInstance(dataGridElement);

        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet(tableName);

        // Merge cells and add image to the workbook
        worksheet.mergeCells("A1:A4");
        const imageId = workbook.addImage({
            base64: clientData[0].Logo,
            extension: 'jpeg',
        });

        //fixed dimensions for the image
        const imageWidth = 150;
        const imageHeight = 80;

        worksheet.addImage(imageId, {
            tl: { col: 0, row: 0 },
            ext: { width: imageWidth, height: imageHeight }
        });

        // Get visible columns only
        var visibleColumns = dataGridInstance.getVisibleColumns();

        DevExpress.excelExporter.exportDataGrid({
            component: dataGridInstance,
            worksheet: worksheet,
            autoFilterEnabled: true,
            topLeftCell: { row: 5, column: 1 },
            customizeCell: function (options) {
                var gridCell = options.gridCell;
                var excelCell = options.excelCell;

                if (gridCell.rowType === "header") {
                    var column = visibleColumns[gridCell.columnIndex];
                    if (column) {
                        excelCell.value = column.caption;
                    }
                }
            }
        }).then(function () {
            // Format column headers with bold text
            var headerRow = worksheet.getRow(5);
            headerRow.font = { bold: true };

            headerRow.eachCell(function (cell, colNumber) {
                cell.fill = {
                    type: 'pattern',
                    pattern: 'solid',
                    fgColor: { argb: 'ffffffcc' }
                };

                cell.border = {
                    top: { style: 'thin' },
                    left: { style: 'thin' },
                    bottom: { style: 'thin' },
                    right: { style: 'thin' }
                };
            });

            function getColumnLetter(columnIndex) {
                var columnName = '';
                while (columnIndex > 0) {
                    var remainder = (columnIndex - 1) % 26;
                    columnName = String.fromCharCode(65 + remainder) + columnName;
                    columnIndex = Math.floor((columnIndex - 1) / 26);
                }
                return columnName;
            }

            var headerLength = visibleColumns.length;
            var last = getColumnLetter(headerLength);

            worksheet.mergeCells('B3:' + last + '3');
            worksheet.getCell('B3').value = tableName;
            worksheet.getCell('B3').alignment = { horizontal: 'center', vertical: 'middle' };
            worksheet.getCell('B3').font = { bold: true, name: 'Arial' };
            worksheet.getCell('B3').fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: 'FFDDDDDD' }
            };

            // Set ProjectName in cell B2
            worksheet.mergeCells('B2:' + last + '2');
            worksheet.getCell('B2').value = clientData[0].ProjectName;
            worksheet.getCell('B2').alignment = { horizontal: 'center', vertical: 'middle' };
            worksheet.getCell('B2').font = { bold: true, name: 'Arial' };
            worksheet.getCell('B2').fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: 'FFFFFFFF' }
            };

            // Set ClientName in cell B1
            worksheet.mergeCells('B1:' + last + '1');
            worksheet.getCell('B1').value = clientData[0].ClientName;
            worksheet.getCell('B1').alignment = { horizontal: 'center', vertical: 'middle' };
            worksheet.getCell('B1').font = { bold: true, name: 'Arial' };
            worksheet.getCell('B1').fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: 'FFDDDDDD' }
            };

            // Loop through all cells and add borders
            worksheet.eachRow({ includeEmpty: true }, function (row, rowNumber) {
                row.eachCell({ includeEmpty: true }, function (cell, colNumber) {
                    cell.border = {
                        top: { style: 'thin' },
                        left: { style: 'thin' },
                        bottom: { style: 'thin' },
                        right: { style: 'thin' }
                    };
                });
            });

            workbook.xlsx.writeBuffer().then(function (buffer) {
                var fileName = childMenuName + '_' + formattedDate + '_' + formattedTime + '.xlsx';
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), fileName);
            });
        });
    }



    // function exportGridToPdf(e) {
    //     var tableName = document.getElementById('dataTable').getAttribute('data-table-name');
    //     var orientation = pdfOrientationSelect.value; //portrait or landscape

    //     // DataGrid instance
    //     var dataGridElement = document.getElementById("dataGridContainer");
    //     var dataGridInstance = DevExpress.ui.dxDataGrid.getInstance(dataGridElement);

    //     var columnWidth = 16;
    //     // var columnWidth = 22;
    //     var rowHeight = 10;
    //     var columnCount = dataGridInstance.columnCount();
    //     var rowCount = dataGridInstance.getDataSource().items().length;

    //     var margin = {
    //         top: 25,
    //         bottom: 20,
    //         left: 15,
    //         right: 15
    //     };

    //     // Calculate required width and height
    //     var totalWidth = columnCount * columnWidth + margin.left + margin.right;
    //     var totalHeight = rowCount * rowHeight + margin.top + margin.bottom;
    //     console.log(totalHeight);

    //     // Define custom sizes for landscape orientation
    //     var landscapeWidth = 500;
    //     var landscapeHeight = 297; // Standard A4 height for landscape

    //     // Set page size based on orientation and content size
    //     var pageFormat = (orientation === 'landscape')
    //         ? [totalWidth + 15, landscapeHeight] // Landscape
    //         : [210, 297]; // Portrait
    //     // : [290, 250]; // Portrait


    //     // Initialize jsPDF with custom page size
    //     var doc = new jsPDF({
    //         orientation: orientation,
    //         unit: 'mm', // Millimeters for accurate margins and dimensions
    //         format: 'a4'
    //     });

    //     // Function to add header content
    //     var addHeader = function () {
    //         doc.setFontSize(13);
    //         doc.setTextColor(0);
    //         doc.text(tableName + ' ' + 'Table', doc.internal.pageSize.getWidth() / 2, 15, { align: 'center' });

    //         // Add logo, project name, client name
    //         var item = clientData[0];
    //         var imgData = item.Logo;
    //         var projectName = item.ProjectName;
    //         var clientName = item.ClientName;

    //         doc.addImage(imgData, 'JPEG', 15, 25, 25, 15);

    //         doc.setFontSize(11);
    //         doc.text('Project: ' + projectName, doc.internal.pageSize.getWidth() / 2, 31, { align: 'center' });
    //         doc.text('Client: ' + clientName, doc.internal.pageSize.getWidth() / 2, 37, { align: 'center' });
    //         doc.setTextColor(0);
    //         doc.setFontSize(0);
    //     };

    //     // Call addHeader for the first page
    //     addHeader();

    //     // Export data grid to PDF
    //     DevExpress.pdfExporter.exportDataGrid({
    //         jsPDFDocument: doc,
    //         component: dataGridInstance,
    //         topLeft: { x: 1, y: 30 }, // Adjust the x and y values to start the table lower
    //         columnWidths: Array(columnCount).fill(columnWidth),
    //         // indent: 5,
    //         customizeCell: function (options) {
    //             const { gridCell, pdfCell } = options;

    //             if (gridCell.rowType === 'data') { //for table content other than headers
    //                 pdfCell.font = { size: 7 }; // continue: increase

    //             } else if (gridCell.rowType === 'header') { //for table headers
    //                 pdfCell.font = { size: 8, style: 'bold' };
    //                 pdfCell.backgroundColor = '#D3D3D3'; //Light grey background
    //                 pdfCell.textColor = '#000000';
    //                 pdfCell.fontStyle = 'bold';
    //             }else if(gridCell.rowType === 'group'){
    //                 pdfCell.backgroundColor = '#DCDCDC';
    //             }
    //         }
    //     }).then(function () {
    //         // Calculate the number of pages
    //         var pageCount = doc.internal.getNumberOfPages();

    //         // Add footer to each page
    //         for (var i = 1; i <= pageCount; i++) {
    //             doc.setPage(i);
    //             addFooter(i, pageCount); // Add footer with page number
    //         }

    //         var fileName = tableName + '_' + formattedDate + '_' + formattedTime;
    //         // Save the PDF document
    //         doc.save(fileName);
    //     });

    //     // Function to add footer with paging
    //     var addFooter = function (pageNumber, pageCount) {
    //         doc.setFontSize(9);
    //         doc.setTextColor('#cccccc');
    //         doc.text('Page ' + pageNumber + ' of ' + pageCount, doc.internal.pageSize.getWidth() / 2, doc.internal.pageSize.getHeight() - 10, { align: 'center' });
    //     };
    // }




    // function exportGridToPdf(e) {
    //     var tableName = document.getElementById('dataTable').getAttribute('data-table-name');
    //     var orientation = pdfOrientationSelect.value || 'landscape'; Default to landscape

    //     DataGrid instance
    //     var dataGridElement = document.getElementById("dataGridContainer");
    //     var dataGridInstance = DevExpress.ui.dxDataGrid.getInstance(dataGridElement);

    //     var margin = {
    //         top: 25,
    //         bottom: 20,
    //         left: 15,
    //         right: 15
    //     };

    //     Initialize jsPDF with custom page size
    //     var doc = new jsPDF({
    //         orientation: orientation,
    //         unit: 'mm',
    //         format: 'a4'
    //     });

    //     Function to add header content
    //     var addHeader = function (isFirstPage) {
    //         if (isFirstPage) {
    //             doc.setFontSize(13);
    //             doc.setTextColor(0);
    //             doc.text(tableName + ' Table', doc.internal.pageSize.getWidth() / 2, 15, { align: 'center' });

    //             Add logo, project name, client name
    //             var item = clientData[0];
    //             var imgData = item.Logo;
    //             var projectName = item.ProjectName;
    //             var clientName = item.ClientName;

    //             if (imgData) {
    //                 doc.addImage(imgData, 'JPEG', 15, 25, 25, 15);
    //             }

    //             doc.setFontSize(11);
    //             doc.text('Project: ' + projectName, doc.internal.pageSize.getWidth() / 2, 31, { align: 'center' });
    //             doc.text('Client: ' + clientName, doc.internal.pageSize.getWidth() / 2, 37, { align: 'center' });
    //         }
    //     };

    //     Function to add footer with paging
    //     var addFooter = function (pageNumber, pageCount) {
    //         doc.setFontSize(9);
    //         doc.setTextColor('#cccccc');
    //         doc.text('Page ' + pageNumber + ' of ' + pageCount, doc.internal.pageSize.getWidth() / 2, doc.internal.pageSize.getHeight() - 10, { align: 'center' });
    //     };

    //     Function to format date and time as DD-MM-YYYY HH:MM:SS
    //     function formatDate(value) {
    //         if (value instanceof Date) {
    //             var day = ('0' + value.getDate()).slice(-2);
    //             var month = ('0' + (value.getMonth() + 1)).slice(-2);
    //             var year = value.getFullYear();
    //             var hours = ('0' + value.getHours()).slice(-2);
    //             var minutes = ('0' + value.getMinutes()).slice(-2);
    //             var seconds = ('0' + value.getSeconds()).slice(-2);
    //             return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;
    //         }
    //         return value;
    //     }

    //     Extract column headers from the data grid
    //     var columns = dataGridInstance.getVisibleColumns().map(function (column) {
    //         return column.caption;
    //     });

    //     Extract row data from the data grid
    //     var rows = dataGridInstance.getDataSource().items().map(function (item) {
    //         return dataGridInstance.getVisibleColumns().map(function (column) {
    //             var cellValue = item[column.dataField];
    //             return formatDate(cellValue);
    //         });
    //     });

    //     Calculate font size and column widths based on orientation and number of columns
    //     var columnCount = columns.length;
    //     var fontSize = (orientation === 'landscape') ? 6 : 4; Smaller font size for portrait
    //     var minColumnWidth = 10; Minimum column width in mm
    //     var maxColumnWidth = 20; Maximum column width in mm

    //     Calculate column widths dynamically
    //     var columnWidths = columns.map(function (col, index) {
    //         var maxContentWidth = Math.max(...rows.map(row => {
    //             var text = row[index] || '';
    //             return typeof text === 'string' ? doc.getTextWidth(text) : 0;
    //         }));
    //         return Math.min(Math.max(maxContentWidth + 10, minColumnWidth), maxColumnWidth);
    //     });

    //     Ensure total column width fits within page width
    //     var totalColumnWidth = columnWidths.reduce((a, b) => a + b, 0);
    //     if (totalColumnWidth > doc.internal.pageSize.width - margin.left - margin.right) {
    //         var scale = (doc.internal.pageSize.width - margin.left - margin.right) / totalColumnWidth;
    //         columnWidths = columnWidths.map(width => width * scale);
    //     }

    //     Pagination handling
    //     var pageHeight = doc.internal.pageSize.height;
    //     var startY = margin.top + 20; Starting position for the table
    //     var currentY = startY;
    //     var rowsPerPage = 25; Adjust the number of rows per page as needed
    //     var pageCount = Math.ceil(rows.length / rowsPerPage);

    //     Add header to the first page
    //     addHeader(true);

    //     for (var page = 1; page <= pageCount; page++) {
    //         if (page > 1) {
    //             doc.addPage(); Add a new page if necessary
    //             currentY = startY;
    //             addHeader(false); Add header only on the first page
    //         }
    //         doc.autoTable({
    //             head: [columns],
    //             body: rows.slice((page - 1) * rowsPerPage, page * rowsPerPage), Slice rows for each page
    //             startY: currentY,
    //             margin: { left: margin.left, right: margin.right },
    //             styles: {
    //                 fontSize: fontSize,
    //                 overflow: 'linebreak', Handle text overflow
    //                 cellPadding: 1, Adjust cell padding
    //                 minCellHeight: 10 Minimum cell height
    //             },
    //             headStyles: {
    //                 fillColor: [240, 240, 240], Set header background color to light grey
    //                 textColor: [0, 0, 0], Set header text color to black
    //                 fontStyle: 'bold', Make header text bold
    //                 lineWidth: 0.1, Set border width
    //                 lineColor: [0, 0, 0] Set border color to black
    //             },
    //             bodyStyles: {
    //                 lineWidth: 0.1, Set border width for body cells
    //                 lineColor: [0, 0, 0] Set border color for body cells
    //             },
    //             theme: 'grid', Use 'grid' theme for the table
    //             columnStyles: columns.reduce((styles, _, index) => {
    //                 styles[index] = { cellWidth: columnWidths[index] };
    //                 return styles;
    //             }, {}),
    //         });
    //         currentY = doc.autoTable.previous.finalY + 10; Move to next position
    //         addFooter(page, pageCount); Add footer with page number
    //     }

    //     var formattedDate = new Date().toISOString().split('T')[0]; Example format: 2024-08-12
    //     var formattedTime = new Date().toLocaleTimeString().replace(/:/g, '-'); Example format: 12-34-56
    //     var fileName = tableName + '_' + formattedDate + '_' + formattedTime;

    //     doc.save(fileName);
    // }


    // function exportGridToPdf(e) {
    //     var tableName = document.getElementById('dataTable').getAttribute('data-table-name');
    //     var orientation = pdfOrientationSelect.value || 'landscape'; // Default to landscape

    //     // DataGrid instance
    //     var dataGridElement = document.getElementById("dataGridContainer");
    //     var dataGridInstance = DevExpress.ui.dxDataGrid.getInstance(dataGridElement);

    //     var margin = {
    //         top: 25,
    //         bottom: 20,
    //         left: 15,
    //         right: 15
    //     };

    //     // Initialize jsPDF with custom page size
    //     var doc = new jsPDF({
    //         orientation: orientation,
    //         unit: 'mm',
    //         format: 'a4'
    //     });

    //     // Function to add header content
    //     var addHeader = function (isFirstPage) {
    //         if (isFirstPage) {
    //             doc.setFontSize(13);
    //             doc.setTextColor(0);
    //             doc.text(tableName + ' Table', doc.internal.pageSize.getWidth() / 2, 15, { align: 'center' });

    //             // Add logo, project name, client name
    //             var item = clientData[0];
    //             var imgData = item.Logo;
    //             var projectName = item.ProjectName;
    //             var clientName = item.ClientName;

    //             if (imgData) {
    //                 doc.addImage(imgData, 'JPEG', 15, 25, 25, 15);
    //             }

    //             doc.setFontSize(11);
    //             doc.text('Project: ' + projectName, doc.internal.pageSize.getWidth() / 2, 31, { align: 'center' });
    //             doc.text('Client: ' + clientName, doc.internal.pageSize.getWidth() / 2, 37, { align: 'center' });
    //         }
    //     };

    //     // Function to add footer with paging
    //     var addFooter = function (pageNumber, pageCount) {
    //         doc.setFontSize(9);
    //         doc.setTextColor('#cccccc');
    //         doc.text('Page ' + pageNumber + ' of ' + pageCount, doc.internal.pageSize.getWidth() / 2, doc.internal.pageSize.getHeight() - 10, { align: 'center' });
    //     };

    //     // Function to format date and time as DD-MM-YYYY HH:MM:SS
    //     function formatDate(value) {
    //         if (value instanceof Date) {
    //             var day = ('0' + value.getDate()).slice(-2);
    //             var month = ('0' + (value.getMonth() + 1)).slice(-2);
    //             var year = value.getFullYear();
    //             var hours = ('0' + value.getHours()).slice(-2);
    //             var minutes = ('0' + value.getMinutes()).slice(-2);
    //             var seconds = ('0' + value.getSeconds()).slice(-2);
    //             return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;
    //         }
    //         return value;
    //     }

    //     // Extract column headers from the data grid
    //     var columns = dataGridInstance.getVisibleColumns().map(function (column) {
    //         return column.caption;
    //     });

    //     // Extract row data from the data grid
    //     var rows = dataGridInstance.getDataSource().items().map(function (item) {
    //         return dataGridInstance.getVisibleColumns().map(function (column) {
    //             var cellValue = item[column.dataField];
    //             return formatDate(cellValue);
    //         });
    //     });

    //     // Calculate font size and column widths based on orientation and number of columns
    //     var columnCount = columns.length;
    //     var fontSize = (orientation === 'landscape') ? 5 : 3.5; // Smaller font size for portrait
    //     var minColumnWidth = 15; // Minimum column width in mm
    //     var maxColumnWidth = 20; // Maximum column width in mm

    //     // Calculate column widths dynamically
    //     var columnWidths = columns.map(function (col, index) {
    //         var maxContentWidth = Math.max(...rows.map(row => {
    //             var text = row[index] || '';
    //             return typeof text === 'string' ? doc.getTextWidth(text) : 0;
    //         }));
    //         return Math.min(Math.max(maxContentWidth + 10, minColumnWidth), maxColumnWidth);
    //     });

    //     // Ensure total column width fits within page width
    //     var totalColumnWidth = columnWidths.reduce((a, b) => a + b, 0);
    //     if (totalColumnWidth > doc.internal.pageSize.width - margin.left - margin.right) {
    //         var scale = (doc.internal.pageSize.width - margin.left - margin.right) / totalColumnWidth;
    //         columnWidths = columnWidths.map(width => width * scale);
    //         console.log(columnWidths)
    //     }

    //     // Pagination handling
    //     var pageHeight = doc.internal.pageSize.height;
    //     var startY = margin.top + 20; // Starting position for the table
    //     var currentY = startY;
    //     var rowsPerPage = (orientation === 'portrait') ? Math.floor((pageHeight - margin.top - margin.bottom) / 10) - 2 : 25; // Adjust for portrait
    //     var pageCount = Math.ceil(rows.length / rowsPerPage);

    //     // Add header to the first page
    //     addHeader(true);

    //     for (var page = 1; page <= pageCount; page++) {
    //         if (page > 1) {
    //             doc.addPage(); // Add a new page if necessary
    //             currentY = startY;
    //             addHeader(false); // Add header only on the first page
    //         }
    //         doc.autoTable({
    //             head: [columns],
    //             body: rows.slice((page - 1) * rowsPerPage, page * rowsPerPage), // Slice rows for each page
    //             startY: currentY,
    //             margin: { left: margin.left, right: margin.right },
    //             styles: {
    //                 fontSize: fontSize,
    //                 overflow: 'linebreak', // Handle text overflow
    //                 cellPadding: 1, // Adjust cell padding
    //                 minCellHeight: 10 // Minimum cell height
    //             },
    //             headStyles: {
    //                 fillColor: [240, 240, 240], // Set header background color to light grey
    //                 textColor: [0, 0, 0], // Set header text color to black
    //                 fontStyle: 'bold', // Make header text bold
    //                 lineWidth: 0.1, // Set border width
    //                 lineColor: [0, 0, 0] // Set border color to black
    //             },
    //             bodyStyles: {
    //                 lineWidth: 0.1, // Set border width for body cells
    //                 lineColor: [0, 0, 0] // Set border color for body cells
    //             },
    //             theme: 'grid', // Use 'grid' theme for the table
    //             columnStyles: columns.reduce((styles, _, index) => {
    //                 styles[index] = { cellWidth: columnWidths[index] };
    //                 return styles;
    //             }, {}),
    //         });
    //         currentY = doc.autoTable.previous.finalY + 5; // Move to next position with reduced gap
    //         addFooter(page, pageCount); // Add footer with page number
    //     }

    //     var formattedDate = new Date().toISOString().split('T')[0]; // Example format: 2024-08-12
    //     var formattedTime = new Date().toLocaleTimeString().replace(/:/g, '-'); // Example format: 12-34-56
    //     var fileName = tableName + '_' + formattedDate + '_' + formattedTime;
    //     // Save the PDF document
    //     doc.save(fileName);
    // }




    //working
    // function exportGridToPdf(e) {
    //     var tableName = document.getElementById('dataTable').getAttribute('data-table-name');
    //     var orientation = pdfOrientationSelect.value; //portrait or landscape

    //     //DataGrid instance
    //     var dataGridElement = document.getElementById("dataGridContainer");
    //     var dataGridInstance = DevExpress.ui.dxDataGrid.getInstance(dataGridElement);

    //     var columnWidth = 16;
    //     // var columnWidth = 22;
    //     var rowHeight = 10;
    //     var columnCount = dataGridInstance.columnCount();
    //     var rowCount = dataGridInstance.getDataSource().items().length;

    //     var margin = {
    //         top: 25,
    //         bottom: 20,
    //         left: 15,
    //         right: 15
    //     };

    //     //Calculate required width and height
    //     var totalWidth = columnCount * columnWidth + margin.left + margin.right;
    //     var totalHeight = rowCount * rowHeight + margin.top + margin.bottom;
    //     console.log(totalHeight);

    //     //Define custom sizes for landscape orientation
    //     var landscapeWidth = 500;
    //     var landscapeHeight = 297; //Standard A4 height for landscape

    //     //Set page size based on orientation and content size
    //     var pageFormat = (orientation === 'landscape')
    //         ? [totalWidth + 15, landscapeHeight]
    //         : [210, 297];
    //     // : [290, 250]; // Portrait


    //     //Initialize jsPDF with custom page size
    //     var doc = new jsPDF({
    //         orientation: orientation,
    //         unit: 'mm', //Millimeters for accurate margins and dimensions
    //         format: 'a4'
    //     });


    //    // Function to add header content
    //     var addHeader = function () {
    //         doc.setFontSize(13);
    //         doc.setTextColor(0);
    //         doc.text(tableName + ' ' + 'Table', doc.internal.pageSize.getWidth() / 2, 15, { align: 'center' });

    //         //Add logo, project name, client name
    //         var item = clientData[0];
    //         var imgData = item.Logo;
    //         var projectName = item.ProjectName;
    //         var clientName = item.ClientName;

    //         doc.addImage(imgData, 'JPEG', 15, 25, 25, 15);

    //         doc.setFontSize(11);
    //         doc.text('Project: ' + projectName, doc.internal.pageSize.getWidth() / 2, 31, { align: 'center' });
    //         doc.text('Client: ' + clientName, doc.internal.pageSize.getWidth() / 2, 37, { align: 'center' });
    //         doc.setTextColor(0);
    //         doc.setFontSize(0);
    //     };

    //     //Call addHeader for the first page
    //     addHeader();

    //     //Export data grid to PDF
    //     DevExpress.pdfExporter.exportDataGrid({
    //         jsPDFDocument: doc,
    //         component: dataGridInstance,
    //         topLeft: { x: 1, y: 30 }, //Adjust the x and y values to start the table lower
    //         columnWidths: Array(columnCount).fill(columnWidth),
    //         indent: 5,
    //         customizeCell: function (options) {
    //             const { gridCell, pdfCell } = options;

    //             if (gridCell.rowType === 'data') { //for table content other than headers
    //                 pdfCell.font = { size: 6};

    //             } else if (gridCell.rowType === 'header') { //for table headers
    //                 pdfCell.font = { size: 8, style: 'bold' };
    //                 pdfCell.backgroundColor = '#D3D3D3'; //Light grey background
    //                 pdfCell.textColor = '#000000';
    //                 pdfCell.fontStyle = 'bold';
    //             }
    //         }
    //     }).then(function () {
    //        // Calculate the number of pages
    //         var pageCount = doc.internal.getNumberOfPages();

    //        // Add footer to each page
    //         for (var i = 1; i <= pageCount; i++) {
    //             doc.setPage(i);
    //             addFooter(i, pageCount); //Add footer with page number
    //         }

    //         var fileName = tableName + '_' + formattedDate + '_' + formattedTime;
    //         //Save the PDF document
    //         doc.save(fileName);
    //     });

    //     //Function to add footer with paging
    //     var addFooter = function (pageNumber, pageCount) {
    //         doc.setFontSize(9);
    //         doc.setTextColor('#cccccc');
    //         doc.text('Page ' + pageNumber + ' of ' + pageCount, doc.internal.pageSize.getWidth() / 2, doc.internal.pageSize.getHeight() - 10, { align: 'center' });
    //     };
    // }


    function exportGridToPdf(e) {
        var tableName = document.getElementById('dataTable').getAttribute('data-table-name');
        var orientation = pdfOrientationSelect.value; //portrait or landscape

        // DataGrid instance
        var dataGridElement = document.getElementById("dataGridContainer");
        var dataGridInstance = DevExpress.ui.dxDataGrid.getInstance(dataGridElement);

        
       
        var columnWidth = 16;
        // var columnWidth = 22;
        var rowHeight = 10;
        var columnCount = dataGridInstance.columnCount();
        var rowCount = dataGridInstance.getDataSource().items().length;
        

        var margin = {
            top: 25,
            bottom: 20,
            left: 15,
            right: 15
        };

        // Calculate required width and height
        var totalWidth = columnCount * columnWidth + margin.left + margin.right;
        var totalHeight = rowCount * rowHeight + margin.top + margin.bottom;
       

        // Define custom sizes for landscape orientation
        var landscapeWidth = 500;
        var landscapeHeight = 297; // Standard A4 height for landscape

        // Set page size based on orientation and content size
        var pageFormat = (orientation === 'landscape')
            ? [totalWidth + 15, landscapeHeight] // Landscape
            : [210, 297]; // Portrait
        // : [290, 250]; // Portrait


        // Initialize jsPDF with custom page size
        var doc = new jsPDF({
            orientation: orientation,
            unit: 'mm', // Millimeters for accurate margins and dimensions
            // format: pageFormat
            format: 'a4'
        });

        // Function to add header content
        var addHeader = function () {
            doc.setFontSize(13);
            doc.setTextColor(0);
            doc.text(tableName + ' ' + 'Table', doc.internal.pageSize.getWidth() / 2, 15, { align: 'center' });

            // Add logo, project name, client name
            var item = clientData[0];
            var imgData = item.Logo;
            var projectName = item.ProjectName;
            var clientName = item.ClientName;

            doc.addImage(imgData, 'JPEG', 15, 25, 25, 15);

            doc.setFontSize(11);
            doc.text('Project: ' + projectName, doc.internal.pageSize.getWidth() / 2, 31, { align: 'center' });
            doc.text('Client: ' + clientName, doc.internal.pageSize.getWidth() / 2, 37, { align: 'center' });
            doc.setTextColor(0);
            doc.setFontSize(0);
        };

        // Call addHeader for the first page
        addHeader();

        // Export data grid to PDF
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGridInstance,
            topLeft: { x: 1, y: 30 }, // Adjust the x and y values to start the table lower
            columnWidths: Array(columnCount).fill(columnWidth),
            // indent: 5,
            customizeCell: function (options) {
                const { gridCell, pdfCell } = options;

                if (gridCell.rowType === 'data') { //for table content other than headers
                    pdfCell.font = { size: 7 }; // continue: increase

                } else if (gridCell.rowType === 'header') { //for table headers
                    pdfCell.font = { size: 8, style: 'bold' };
                    pdfCell.backgroundColor = '#D3D3D3'; //Light grey background
                    pdfCell.textColor = '#000000';
                    pdfCell.fontStyle = 'bold';
                } else if (gridCell.rowType === 'group') {
                    pdfCell.backgroundColor = '#DCDCDC';
                }
            }
        }).then(function () {
            // Calculate the number of pages
            var pageCount = doc.internal.getNumberOfPages();

            // Add footer to each page
            for (var i = 1; i <= pageCount; i++) {
                doc.setPage(i);
                addFooter(i, pageCount); // Add footer with page number
            }

            var fileName = tableName + '_' + formattedDate + '_' + formattedTime;
            // Save the PDF document
            doc.save(fileName);
        });

        // Function to add footer with paging
        var addFooter = function (pageNumber, pageCount) {
            doc.setFontSize(9);
            doc.setTextColor('#cccccc');
            doc.text('Page ' + pageNumber + ' of ' + pageCount, doc.internal.pageSize.getWidth() / 2, doc.internal.pageSize.getHeight() - 10, { align: 'center' });
        };
    }

</script>
