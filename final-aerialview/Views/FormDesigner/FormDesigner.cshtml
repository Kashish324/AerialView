@* @{
    ViewData["Title"] = "Advanced Dynamic Form Designer";
}

<div class="container mt-4">
    <div class="row">
        <!-- Toolbox -->
        <div class="col-md-3">
            <div class="toolbox">
                <h5>Form Elements</h5>
                <div id="text-field" class="draggable" draggable="true" data-type="text">Text Field</div>
                <div id="textarea" class="draggable" draggable="true" data-type="textarea">Text Area</div>
                <div id="select" class="draggable" draggable="true" data-type="select">Select Dropdown</div>
                <div id="checkbox" class="draggable" draggable="true" data-type="checkbox">Checkbox</div>
                <div id="radio" class="draggable" draggable="true" data-type="radio">Radio Button</div>
                <div id="email" class="draggable" draggable="true" data-type="email">Email</div>
                <div id="number" class="draggable" draggable="true" data-type="number">Number</div>
                <div id="password" class="draggable" draggable="true" data-type="password">Password</div>
                <div id="date" class="draggable" draggable="true" data-type="date">Date</div>
                <div id="button" class="draggable" draggable="true" data-type="button">Button</div>
            </div>
        </div>

        <!-- Canvas -->
        <div class="col-md-6">
            <div id="form-canvas" class="canvas border p-4" style="min-height: 400px; background-color: #f9f9f9;">
                <h5>Build Your Form</h5>
                <!-- Form elements will be dynamically added here -->
            </div>
            <!-- Preview Button -->
            <button id="preview-btn" class="btn btn-primary mt-3">Preview Form</button>
        </div>

        <!-- Properties Panel -->
        <div class="col-md-3">
            <div class="properties-panel">
                <h5>Properties</h5>
                <div id="element-properties">
                    <p>Select an element to edit its properties.</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Preview Modal -->
    <div id="preview-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="preview-modal-label" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="preview-modal-label">Form Preview</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="preview-form">
                        <!-- Dynamically populated preview will go here -->
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const draggables = document.querySelectorAll(".draggable");
        const canvas = document.getElementById("form-canvas");
        const propertiesPanel = document.getElementById("element-properties");
        const previewButton = document.getElementById("preview-btn");
        const previewModal = new bootstrap.Modal(document.getElementById("preview-modal"));
        const previewForm = document.getElementById("preview-form");
        let selectedElement = null;

        draggables.forEach(draggable => {
            draggable.addEventListener("dragstart", dragStart);
        });

        canvas.addEventListener("dragover", dragOver);
        canvas.addEventListener("drop", drop);

        previewButton.addEventListener("click", previewFormFunction);

        function dragStart(e) {
            e.dataTransfer.setData("text/plain", e.target.id);
        }

        function dragOver(e) {
            e.preventDefault();
        }

        function drop(e) {
            e.preventDefault();
            const id = e.dataTransfer.getData("text/plain");
            const elementType = document.getElementById(id).getAttribute("data-type");

            let newElement = document.createElement("div");
            newElement.classList.add("form-group", "dropped-element", "my-2");
            newElement.setAttribute("data-type", elementType);

            let input;
            let label = document.createElement("label");
            label.textContent = "Label"; // Default label text

            switch (elementType) {
                case "text":
                case "email":
                case "number":
                case "password":
                case "date":
                    input = document.createElement("input");
                    input.type = elementType;
                    input.placeholder = `Enter ${elementType}`;
                    break;
                case "textarea":
                    input = document.createElement("textarea");
                    input.placeholder = "Enter text";
                    input.rows = 3;
                    break;
                case "select":
                    input = document.createElement("select");
                    const defaultOption = document.createElement("option");
                    defaultOption.textContent = "Option 1";
                    input.appendChild(defaultOption);
                    break;
                case "checkbox":
                    input = document.createElement("input");
                    input.type = "checkbox";
                    label.textContent = "Checkbox Label";
                    break;
                case "radio":
                    input = document.createElement("input");
                    input.type = "radio";
                    label.textContent = "Radio Label";
                    break;
                case "button":
                    input = document.createElement("button");
                    input.classList.add("btn", "btn-primary");
                    input.textContent = "Button";
                    label = null; // Buttons don’t need labels
                    break;
                default:
                    return;
            }

            if (label) newElement.appendChild(label);
            newElement.appendChild(input);
            canvas.appendChild(newElement);

            // Click event to edit properties
            newElement.addEventListener("click", () => editProperties(newElement));
        }

        function editProperties(element) {
            selectedElement = element;
            const elementType = element.getAttribute("data-type");
            propertiesPanel.innerHTML = ""; // Clear the properties panel

            // Create label editing input
            if (elementType !== "button") {
                const labelInput = document.createElement("input");
                labelInput.type = "text";
                labelInput.classList.add("form-control", "mb-2");
                labelInput.placeholder = "Label text";
                labelInput.value = element.querySelector("label").textContent;
                labelInput.addEventListener("input", (e) => {
                    element.querySelector("label").textContent = e.target.value;
                });
                propertiesPanel.appendChild(labelInput);
            }

            // Add specific properties based on element type
            if (elementType === "select") {
                // Dropdown options management
                const optionsTitle = document.createElement("h6");
                optionsTitle.textContent = "Options:";
                propertiesPanel.appendChild(optionsTitle);

                const optionsList = document.createElement("div");
                element.querySelectorAll("option").forEach(option => {
                    const optionInput = document.createElement("input");
                    optionInput.type = "text";
                    optionInput.classList.add("form-control", "mb-2");
                    optionInput.value = option.textContent;
                    optionInput.addEventListener("input", (e) => {
                        option.textContent = e.target.value;
                    });
                    optionsList.appendChild(optionInput);
                });
                propertiesPanel.appendChild(optionsList);

                // Button to add new option
                const addOptionBtn = document.createElement("button");
                addOptionBtn.textContent = "Add Option";
                addOptionBtn.classList.add("btn", "btn-secondary", "btn-sm", "mt-2");
                addOptionBtn.addEventListener("click", () => {
                    const newOption = document.createElement("option");
                    newOption.textContent = "New Option";
                    element.querySelector("select").appendChild(newOption);

                    // Add input for new option in properties
                    const newOptionInput = document.createElement("input");
                    newOptionInput.type = "text";
                    newOptionInput.classList.add("form-control", "mb-2");
                    newOptionInput.value = "New Option";
                    newOptionInput.addEventListener("input", (e) => {
                        newOption.textContent = e.target.value;
                    });
                    optionsList.appendChild(newOptionInput);
                });
                propertiesPanel.appendChild(addOptionBtn);
            }
            // Label editing
            // if (elementType !== "button") {
            //     const labelInput = document.createElement("input");
            //     labelInput.type = "text";
            //     labelInput.classList.add("form-control", "mb-2");
            //     labelInput.placeholder = "Label text";
            //     labelInput.value = element.querySelector("label") ? element.querySelector("label").textContent : "";
            //     labelInput.addEventListener("input", (e) => {
            //         if (element.querySelector("label")) {
            //             element.querySelector("label").textContent = e.target.value;
            //         }
            //     });
            //     propertiesPanel.appendChild(labelInput);
            // }

            // Button Text Customization
            if (elementType === "button") {
                const buttonTextLabel = document.createElement("label");
                buttonTextLabel.textContent = "Button Text:";
                const buttonTextInput = document.createElement("input");
                buttonTextInput.type = "text";
                buttonTextInput.classList.add("form-control", "mb-2");
                buttonTextInput.value = element.querySelector("button").textContent;
                buttonTextInput.addEventListener("input", (e) => {
                    element.querySelector("button").textContent = e.target.value;
                });
                propertiesPanel.appendChild(buttonTextLabel);
                propertiesPanel.appendChild(buttonTextInput);
            }

            // Styling customization for size, color, and text
            const sizeLabel = document.createElement("label");
            sizeLabel.textContent = "Font Size:";
            const sizeInput = document.createElement("input");
            sizeInput.type = "number";
            sizeInput.classList.add("form-control", "mb-2");
            sizeInput.value = getComputedStyle(element.querySelector("input") || element.querySelector("textarea") || element.querySelector("button")).fontSize.replace('px', '');
            sizeInput.addEventListener("input", (e) => {
                const value = e.target.value + "px";
                element.querySelector("input")?.style.setProperty("font-size", value);
                element.querySelector("textarea")?.style.setProperty("font-size", value);
                element.querySelector("button")?.style.setProperty("font-size", value);
            });
            propertiesPanel.appendChild(sizeLabel);
            propertiesPanel.appendChild(sizeInput);

            // Color customization
            const colorLabel = document.createElement("label");
            colorLabel.textContent = "Text Color:";
            const colorInput = document.createElement("input");
            colorInput.type = "color";
            colorInput.classList.add("form-control", "mb-2");
            colorInput.value = getComputedStyle(element.querySelector("input") || element.querySelector("textarea") || element.querySelector("button")).color;
            colorInput.addEventListener("input", (e) => {
                const value = e.target.value;
                element.querySelector("input")?.style.setProperty("color", value);
                element.querySelector("textarea")?.style.setProperty("color", value);
                element.querySelector("button")?.style.setProperty("color", value);
            });
            propertiesPanel.appendChild(colorLabel);
            propertiesPanel.appendChild(colorInput);

            // Border customization
            const borderLabel = document.createElement("label");
            borderLabel.textContent = "Border Width:";
            const borderWidthInput = document.createElement("input");
            borderWidthInput.type = "number";
            borderWidthInput.classList.add("form-control", "mb-2");
            borderWidthInput.value = getComputedStyle(element).borderWidth.replace('px', '');
            borderWidthInput.addEventListener("input", (e) => {
                const value = e.target.value + "px";
                element.style.borderWidth = value;
            });
            propertiesPanel.appendChild(borderLabel);
            propertiesPanel.appendChild(borderWidthInput);
        }

        function previewFormFunction() {
            // Clone the canvas content for previewing
            const formClone = canvas.cloneNode(true);
            const previewContainer = formClone.querySelectorAll(".dropped-element");

            // Modify cloned elements if needed (e.g., replace inputs with static labels)

            previewForm.innerHTML = ""; // Clear previous preview
            previewForm.appendChild(formClone);
            previewModal.show();
        }
    });

</script> *@
@*
@{
    ViewData["Title"] = "Advanced Dynamic Form Designer";
}

<div class="container mt-4">
    <div class="row">
        <!-- Toolbox -->
        <div class="col-md-3">
            <div class="toolbox">
                <h5>Form Elements</h5>
                <div id="text-field" class="draggable" draggable="true" data-type="text">Text Field</div>
                <div id="textarea" class="draggable" draggable="true" data-type="textarea">Text Area</div>
                <div id="select" class="draggable" draggable="true" data-type="select">Select Dropdown</div>
                <div id="checkbox" class="draggable" draggable="true" data-type="checkbox">Checkbox</div>
                <div id="radio" class="draggable" draggable="true" data-type="radio">Radio Button</div>
                <div id="email" class="draggable" draggable="true" data-type="email">Email</div>
                <div id="number" class="draggable" draggable="true" data-type="number">Number</div>
                <div id="password" class="draggable" draggable="true" data-type="password">Password</div>
                <div id="date" class="draggable" draggable="true" data-type="date">Date</div>
                <div id="button" class="draggable" draggable="true" data-type="button">Button</div>
            </div>
        </div>

        <!-- Canvas -->
        <div class="col-md-6">
            <div id="form-canvas" class="canvas border p-4" style="min-height: 400px; background-color: #f9f9f9;">
                <h5>Build Your Form</h5>
                <!-- Form elements will be dynamically added here -->
            </div>
            <!-- Preview Button -->
            <button id="preview-btn" class="btn btn-primary mt-3">Preview Form</button>
        </div>

        <!-- Properties Panel -->
        <div class="col-md-3">
            <div class="properties-panel">
                <h5>Properties</h5>
                <div id="element-properties">
                    <p>Select an element to edit its properties.</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Preview Modal -->
    <div id="preview-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="preview-modal-label" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Modal title</h5>
                    <button type="button" class="btn-close btn-sm" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="preview-form">
                        <!-- Dynamically populated preview will go here -->
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const draggables = document.querySelectorAll(".draggable");
        const canvas = document.getElementById("form-canvas");
        const propertiesPanel = document.getElementById("element-properties");
        const previewButton = document.getElementById("preview-btn");
        const previewModal = new bootstrap.Modal(document.getElementById("preview-modal"));
        const previewForm = document.getElementById("preview-form");
        let selectedElement = null;

        draggables.forEach(draggable => {
            draggable.addEventListener("dragstart", dragStart);
        });

        canvas.addEventListener("dragover", dragOver);
        canvas.addEventListener("drop", drop);

        previewButton.addEventListener("click", previewFormFunction);

        function dragStart(e) {
            e.dataTransfer.setData("text/plain", e.target.id);
        }

        function dragOver(e) {
            e.preventDefault();
        }

        function drop(e) {
            e.preventDefault();
            const id = e.dataTransfer.getData("text/plain");
            const elementType = document.getElementById(id).getAttribute("data-type");

            let newElement = document.createElement("div");
            newElement.classList.add("form-group", "dropped-element", "my-2");
            newElement.setAttribute("data-type", elementType);

            let input;
            let label = document.createElement("label");
            label.textContent = "Label"; // Default label text

            switch (elementType) {
                case "text":
                case "email":
                case "number":
                case "password":
                case "date":
                    input = document.createElement("input");
                    input.type = elementType;
                    input.placeholder = `Enter ${elementType}`;
                    break;
                case "textarea":
                    input = document.createElement("textarea");
                    input.placeholder = "Enter text";
                    input.rows = 3;
                    break;
                case "select":
                    input = document.createElement("select");
                    const defaultOption = document.createElement("option");
                    defaultOption.textContent = "Option 1";
                    input.appendChild(defaultOption);
                    break;
                case "checkbox":
                    input = document.createElement("input");
                    input.type = "checkbox";
                    label.textContent = "Checkbox Label";
                    break;
                case "radio":
                    input = document.createElement("input");
                    input.type = "radio";
                    label.textContent = "Radio Label";
                    break;
                case "button":
                    input = document.createElement("button");
                    input.classList.add("btn", "btn-primary");
                    input.textContent = "Button";
                    label = null; // Buttons don’t need labels
                    break;
                default:
                    return;
            }

            if (label) newElement.appendChild(label);
            newElement.appendChild(input);
            canvas.appendChild(newElement);

            // Click event to edit properties
            newElement.addEventListener("click", () => editProperties(newElement));
        }

        function editProperties(element) {
            selectedElement = element;
            const elementType = element.getAttribute("data-type");
            propertiesPanel.innerHTML = ""; // Clear the properties panel

            // Create label editing input
            if (elementType !== "button") {
                const labelInput = document.createElement("input");
                labelInput.type = "text";
                labelInput.classList.add("form-control", "mb-2");
                labelInput.placeholder = "Label text";
                labelInput.value = element.querySelector("label").textContent;
                labelInput.addEventListener("input", (e) => {
                    element.querySelector("label").textContent = e.target.value;
                });
                propertiesPanel.appendChild(labelInput);
            }

            // Add specific properties based on element type
            if (elementType === "select") {
                const optionsTitle = document.createElement("h6");
                optionsTitle.textContent = "Options:";
                propertiesPanel.appendChild(optionsTitle);

                const optionsList = document.createElement("div");
                element.querySelectorAll("option").forEach(option => {
                    const optionInput = document.createElement("input");
                    optionInput.type = "text";
                    optionInput.classList.add("form-control", "mb-2");
                    optionInput.value = option.textContent;
                    optionInput.addEventListener("input", (e) => {
                        option.textContent = e.target.value;
                    });
                    optionsList.appendChild(optionInput);
                });
                propertiesPanel.appendChild(optionsList);

                const addOptionBtn = document.createElement("button");
                addOptionBtn.textContent = "Add Option";
                addOptionBtn.classList.add("btn", "btn-secondary", "btn-sm", "mt-2");
                addOptionBtn.addEventListener("click", () => {
                    const newOption = document.createElement("option");
                    newOption.textContent = "New Option";
                    element.querySelector("select").appendChild(newOption);

                    const newOptionInput = document.createElement("input");
                    newOptionInput.type = "text";
                    newOptionInput.classList.add("form-control", "mb-2");
                    newOptionInput.value = "New Option";
                    newOptionInput.addEventListener("input", (e) => {
                        newOption.textContent = e.target.value;
                    });
                    optionsList.appendChild(newOptionInput);
                });
                propertiesPanel.appendChild(addOptionBtn);
            }

            // Button Text Customization
            if (elementType === "button") {
                const buttonTextLabel = document.createElement("label");
                buttonTextLabel.textContent = "Button Text:";
                const buttonTextInput = document.createElement("input");
                buttonTextInput.type = "text";
                buttonTextInput.classList.add("form-control", "mb-2");
                buttonTextInput.value = element.querySelector("button").textContent;
                buttonTextInput.addEventListener("input", (e) => {
                    element.querySelector("button").textContent = e.target.value;
                });
                propertiesPanel.appendChild(buttonTextLabel);
                propertiesPanel.appendChild(buttonTextInput);
            }
        }

        function previewFormFunction() {
            const formPreviewHTML = document.getElementById("form-canvas").innerHTML;
            previewForm.innerHTML = formPreviewHTML;
            previewModal.show();
        }
    });
</script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
 *@

@{
    ViewData["Title"] = "Form Designer";
}

<style>

    .form-wrap.form-builder .cb-wrap.sticky-controls {
        margin-left: 5px !important;
    }

    #fb-rendered-form {
        clear: both;
        display: none;
    }

    /* #fb-rendered-form button {
            float: right;
        } */

    .form-builder-dialog {
        z-index: 999;
        /* overflow-y: visible; */
    }

        .form-builder-dialog.positioned {
            overflow-y: visible;
        }

    .form-builder-overlay {
        z-index: 999;
    }

    .form-wrap.form-builder .cb-wrap .form-actions {
        float: left;
        margin-left: 2px;
    }

    .form-actions .save-template {
        background-color: #1866B0 !important;
        /* background-color: #333 !important; */
    }

    .form-actions .clear-all {
        /* background-color: #FAA41B !important; */
        background-color: #2f2f2fd1 !important;
    }

    .form-actions .get-data {
        /* background-color: #FAA41B !important; */
        background-color: #fff !important;
    }

    .saveDataWrap {
        text-align: center;
        margin-bottom: 10px;
    }
</style>

<div class="container-fluid  p-3">
    <div class="my-2 mt-1 p-1 d-flex align-items-center justify-content-between">
        <div class="fw-semibold mb-3 fs-5 text-center text-md-start">
            <i class="ri-edit-box-line text-primary fw-normal fs-4"></i> Custom Form Designer
        </div>

    </div>
    <div id="fb-editor"></div>

    <div id="fb-rendered-form" class=" bg-white p-2 position-relative">
        <form action="#"></form>
        @* <button class="btn btn-sm btn-warning edit-form">Edit</button> *@
        <div class="d-flex justify-content-end">
            <button id="editBtn" class="btn btn-sm btn-warning edit-form mt-3">Edit</button>
            <button id="exportBtn" class="btn btn-secondary btn-sm mt-3 mx-1" title="Export JSON"><i class="ri-upload-2-line"></i> Export JSON</button>
            <button id="saveFormBtn" class="btn text-white btn-sm edit-form mt-3 " style="background-color: #1866B0 !important;">Save Form</button>
        </div>
        @*  <div class="saveDataWrap">
        <button id="saveData" class="btn btn-sm btn-success edit-form mt-3 me-1" type="button">External Save Button</button>
        </div> *@
    </div>


    <!-- Preview, Export, Import, and Save Buttons -->
    @* <button id="previewBtn" class="btn btn-primary btn-sm mt-3">Preview Form</button>
    <button id="saveFormBtn" class="btn btn-success btn-sm mt-3">Save Form</button> *@
    @* <button id="exportBtn" class="btn btn-secondary btn-sm mt-3">Export JSON</button>
    <button id="importBtn" class="btn btn-secondary btn-sm mt-3">Import JSON</button> *@

    <!-- Form Preview Section -->
    <div id="form-preview" class="mt-5"></div>
</div>

<!-- Include jQuery and jQuery UI -->
@* <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script> *@
@* <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.13.2/jquery-ui.min.js"></script> *@
<script src="/lib/jquery.min.js"></script>
<script src="/lib/jquery-ui.min.js"></script>

<!-- Include FormBuilder -->
@* <script src="https://formbuilder.online/assets/js/form-builder.min.js"></script> *@
@* <script src="https://formbuilder.online/assets/js/form-render.min.js"></script> *@
<script src="/lib/form-builder.min.js"></script>
<script src="/lib/form-render.min.js"></script>

<!-- Include RateYo (for star rating functionality) -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/rateYo/2.3.2/jquery.rateyo.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/rateYo/2.3.2/jquery.rateyo.min.js"></script>
@* <link rel="stylesheet" href="~/lib/rateyo.min.css">
<script src="~/lib/rateyo.min.js"></script> *@

<script>

    jQuery(function ($) {
        // Define custom fields and templates for various elements
        let fields = [
            // { label: 'Star Rating', attrs: { type: 'starRating' }, icon: '🌟' },
            // { label: 'Color Picker', attrs: { type: 'colorPicker' }, icon: '🎨' },
        ];

        let templates = {

            // starRating: function (fieldData) {
            //     return {
            //         field: '<span id="' + fieldData.name + '"></span>',
            //         onRender: function () {
            //             $(document.getElementById(fieldData.name)).rateYo({ rating: 3.6 });
            //         }
            //     };
            // },
            // colorPicker: function (fieldData) {
            //     return {
            //         field: `<input type="color" id="${fieldData.name}" name="${fieldData.name}">`
            //     };
            // },

        };

        // Initialize formBuilder with custom fields, templates, and options
        var $fbEditor = $(document.getElementById('fb-editor')),
            $formContainer = $(document.getElementById('fb-rendered-form')),
            formBuilder = $fbEditor.formBuilder({
                fields: fields,
                templates: templates,
                onSave: function () {
                    // Toggle editor and show rendered form
                    $fbEditor.toggle();
                    $formContainer.toggle();

                    // Render the form with formRender and apply custom templates
                    $('form', $formContainer).formRender({
                        formData: formBuilder.actions.getData('json'),
                        templates: templates
                    });
                }
            });

        

        // Preview Form
        $('#previewBtn').on('click', function () {
            var formData = formBuilder.actions.getData('json');
            $('#form-preview').formRender({ formData, templates });
        });

        // Export JSON
        $('#exportBtn').on('click', function () {
            var formData = formBuilder.actions.getData('json');
            const blob = new Blob([formData], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');

            let person = prompt("Save as:", "formData");
            if (person != null) {

                a.href = url;
                a.download = `${person}`;
                a.click();
                URL.revokeObjectURL(url);
            }
        });

        // Import JSON
        $('#importBtn').on('click', function () {
            // Use file input or hard-coded data for import (simplified here)
            const savedData = '[{"type": "text", "label": "Imported Field"}]';
            formBuilder.actions.setData(savedData);
        });

        // Save Form to Server (simulated)
        $('#saveFormBtn').on('click', function () {
            var formData = formBuilder.actions.getData('json');
            $.ajax({
                url: '/your-save-endpoint',
                type: 'POST',
                data: { formData: formData },
                success: function (response) {
                    alert('Form saved successfully!');
                    console.log(response)
                }
            });
        });

        // Edit Form Button (toggles back to the editor view)
        $('.edit-form', $formContainer).on('click', function () {
            $fbEditor.toggle();
            $formContainer.toggle();
        });

        document.getElementById("saveFormBtn").addEventListener("click", () => {
            console.log("external save clicked");
            const result = formBuilder.actions.save();
            console.log("result:", result);
        });
    });

    // jQuery(function ($) {
    //     // Define custom fields and templates
    //     let fields = [{
    //         label: 'Star Rating',
    //         attrs: {
    //             type: 'starRating'
    //         },
    //         icon: '🌟'
    //     }];

    //     let templates = {
    //         starRating: function (fieldData) {
    //             return {
    //                 field: '<span id="' + fieldData.name + '"></span>',
    //                 onRender: function () {
    //                     $(document.getElementById(fieldData.name)).rateYo({ rating: 3.6 });
    //                 }
    //             };
    //         }
    //     };

    //     // Initialize formBuilder with custom fields and templates
    //     // $('#fb-editor').formBuilder({
    //     //     fields: fields,
    //     //     templates: templates
    //     // });

    //     var $fbEditor = $(document.getElementById('fb-editor')),
    //         $formContainer = $(document.getElementById('fb-rendered-form')),
    //         fbOptions = {
    //             onSave: function () {
    //                 $fbEditor.toggle();
    //                 $formContainer.toggle();
    //                 $('form', $formContainer).formRender({
    //                     formData: formBuilder.formData
    //                 });
    //             }
    //         },
    //         formBuilder = $fbEditor.formBuilder(fbOptions);

    //     $('.edit-form', $formContainer).on('click', function () {
    //         $fbEditor.toggle();
    //         $formContainer.toggle();
    //     });
    // });


    // jQuery(function ($) {
    //     // Define custom fields and templates
    //     let fields = [{
    //         label: 'Star Rating',
    //         attrs: {
    //             type: 'starRating'
    //         },
    //         icon: '🌟'
    //     }];

    //     let templates = {
    //         starRating: function (fieldData) {
    //             return {
    //                 field: '<span id="' + fieldData.name + '"></span>',
    //                 onRender: function () {
    //                     $(document.getElementById(fieldData.name)).rateYo({ rating: 3.6 });
    //                 }
    //             };
    //         }
    //     };

    //     // Initialize formBuilder with custom fields, templates, and options
    //     var $fbEditor = $(document.getElementById('fb-editor')),
    //         $formContainer = $(document.getElementById('fb-rendered-form')),
    //         fbOptions = {
    //             fields: fields,
    //             templates: templates,
    //             onSave: function () {
    //                 // Hide editor and display rendered form
    //                 $fbEditor.toggle();
    //                 $formContainer.toggle();

    //                 // Render the form with formRender and apply custom templates
    //                 $('form', $formContainer).formRender({
    //                     formData: formBuilder.actions.getData('json'),
    //                     templates: templates
    //                 });
    //             }
    //         },
    //         formBuilder = $fbEditor.formBuilder(fbOptions);

    //     // Toggle back to form editor on "Edit" button click
    //     $('.edit-form', $formContainer).on('click', function () {
    //         $fbEditor.toggle();
    //         $formContainer.toggle();
    //     });
    // });
</script>
