@model IEnumerable<final_aerialview.Models.ReportConfigModel>

@{
    ViewData["Title"] = @ViewData["selectedReport"];
}


<div class="d-flex flex-column gap-1 w-100 text-center text-capitalize mt-3">
    <h6 class="mb-0 lh-sm fw-bold text-primary-emphasis">@ViewData["selectedReport"]</h6>
</div>

<div class="reportConfig-table bg-white rounded mt-3 shadow">
    @(
        Html.DevExtreme().DataGrid()
        .ID("reportConfigContainer")
        .DataSource(Model)
        .ColumnAutoWidth(false)
        .ColumnMinWidth(60)
        .AllowColumnResizing(true)
        .ShowColumnLines(true)
        .ShowRowLines(true)
        .HoverStateEnabled(true)
        .Editing(editing =>
        {
            editing.Mode(GridEditMode.Batch);
            editing.AllowUpdating(true);
        })
        .ShowColumnHeaders(true)
        .Columns(c =>
        {
            //showing required columns
            c.Add().DataField("Rid").Caption("ID").AllowEditing(false).CssClass("datagridCol");
            c.Add().DataField("ColumnName").Caption("Column Name").AllowEditing(false).CssClass("datagridCol");
            c.Add().DataField("DataType").Caption("Data Type").AllowEditing(false).CssClass("datagridCol");
            c.Add().DataField("Required").Caption("Required").AllowEditing(true).CssClass("datagridCol");
            c.Add().DataField("DisplayName").Caption("Display Name").AllowEditing(true).CssClass("datagridCol");
            c.Add().DataField("EditableColumn").Caption("Editable Cell").AllowEditing(true).CssClass("datagridCol");
            c.Add().DataField("CalculatedField").Caption("Calculated Field").AllowEditing(true).CssClass("datagridCol");
           
        })
        .Pager(pager =>
        {
            pager.Visible(true);
            pager.DisplayMode(GridPagerDisplayMode.Full);
            pager.ShowPageSizeSelector(true);
            pager.AllowedPageSizes(new JS("[10, 20, 'all']"));
            pager.ShowInfo(true);
            pager.ShowNavigationButtons(true);
        })
        .Paging(paging =>
        {
            paging.Enabled(true);
            paging.PageSize(20);
        })
        
        .OnSaving("onSaving")
        )
</div>


<script>
    function onSaving(e) {
        var changes = e.changes;

        if (changes.length > 0) {
            var updateData = changes.map(change => ({
                Rid: change.key.Rid, // Including Rid in the same object
             
                //old data
                ...change.key,
                //updated data to override old data 
                ...change.data
            }));

            console.log(updateData);

            $.ajax({
                url: '@Url.Action("UpdateReportConfig", "ReportConfiguration")',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(updateData), // Sending the merged data
                success: function (response) {
                    if (response.success) {
                        // DevExpress.ui.notify('Changes saved successfully', 'success', 2000);
                        DevExpress.ui.notify({
                            message: "Changes saved successfully",
                            width: 300,
                            type: "success",
                            displayTime: 3500,
                            shading: true,
                            animation: {
                                show: { type: "fade", duration: 400, from: 0, to: 1 },
                                hide: { type: "fade", duration: 40, to: 0 }
                            }
                        }, {
                            position: "bottom center",
                            direction: "up-push"
                        });
                    } else {
                        // DevExpress.ui.notify('Error saving changes', 'error', 2000);
                        DevExpress.ui.notify({
                            message: "Error saving changes",
                            width: 300,
                            type: "error",
                            displayTime: 3500,
                            shading: true,
                            animation: {
                                show: { type: "fade", duration: 400, from: 0, to: 1 },
                                hide: { type: "fade", duration: 40, to: 0 }
                            }
                        }, {
                            position: "bottom center",
                            direction: "up-push"
                        });
                    }
                },

                error: function () {
                    // DevExpress.ui.notify('Error updating data to the backend', 'error', 2000);
                    DevExpress.ui.notify({
                        message: "Error updating data to the backend",
                        width: 300,
                        type: "error",
                        displayTime: 3500,
                        shading: true,
                        animation: {
                            show: { type: "fade", duration: 400, from: 0, to: 1 },
                            hide: { type: "fade", duration: 40, to: 0 }
                        }
                    }, {
                        position: "bottom center",
                        direction: "up-push"
                    });
                }
            });
        }
    }
</script>