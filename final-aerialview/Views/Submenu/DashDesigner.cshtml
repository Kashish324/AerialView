@model List<DashboardDataModel>

@{
    ViewData["Title"] = "Dash Designer";
    Layout = null;
}

@using DevExpress.AspNetCore
@using DevExpress.DashboardWeb
@using DevExpress.DashboardAspNetCore

<!DOCTYPE html>
<html lang="en">
<head>
    <title>@ViewData["Title"] - AerialView-3.0</title>
    <link rel="stylesheet" href="/fonts/remixicon.css">
    <link rel="stylesheet" href="/css/bootstrap.min.css" />
    <link rel="stylesheet" href="/fonts/remixicon.css">
    <link href="~/css/site.min.css" rel="stylesheet" />
    <link href="~/css/ace/ace.bundle.css" rel="stylesheet" />
    <script src="~/js/site.min.js"></script>
    <link href="~/css/dashboard.css" rel="stylesheet" />
    <link rel="icon" href="@Url.Content("~/33477137_AerialView-Logo-5.ico")">
</head>


@{
    var hasdashDefault = Model.Any(i => i.DashDefault);
}

<body>

    @if (!hasdashDefault)
    {

        <div style="position: absolute; left:0;top:50px;right:0;bottom:0;">
            @(Html.DevExpress().Dashboard("clientDashboardControl")
                .ControllerName("DefaultDashboard")
                .Width("100%")
                .Height("100%")
                .WorkingMode(WorkingMode.Designer)
                .OnBeforeRender("onBeforeRender")
                )
        </div>
    }
    else
    {

        @foreach (var i in Model)
        {
            if (i.DashDefault == true)
            {
                if (i.DashPath != null)
                {
                    // removing the extension for dashboard viewer syntax
                    string FileNameOnly = @i.DashPath.Substring(0, @i.DashPath.LastIndexOf("."));

                    <div style="position: absolute; left:0;top:0px;right:0;bottom:0;">
                        @(
                            Html.DevExpress().Dashboard("clientDashboardControl")
                            .ControllerName("DefaultDashboard")
                            .Width("100%")
                            .Height("100%")
                            .WorkingMode(WorkingMode.Designer)
                            .InitialDashboardId(FileNameOnly)
                            .OnBeforeRender("onBeforeRender")
                            )
                    </div>
                }
               
            }
        }
    }

    <script src="/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/SaveAsExtension.js"></script>

    <!-- Defines the "Save As" extension template. -->
    @* <script type="text/html" id="dx-save-as-form">
    <div>Dashboard Name:</div>
    <div style="margin: 10px 0" data-bind="dxTextBox: { value: newName }"></div>
    <div data-bind="dxButton: { text: 'Save', onClick: saveAs }"></div>
    </script> *@

    <script>
        var dashboardControl; // Declare globally

        function onBeforeRender(dashboardControl) {

            //added the switch button in dashboard left panel
            dashboardControl.registerExtension(new DevExpress.Dashboard.DashboardPanelExtension(dashboardControl));
            // dashboardControl.registerExtension(new SaveAsDashboardExtension(dashboardControl));


            //to refresh the data 

            // Initialize or capture the dashboard control
            dashboardControl = clientDashboardControl;

            // Set an interval to refresh the dashboard every 5 seconds (for example)
            // setInterval(() => {
            //     if (dashboardControl) {
            //         dashboardControl.reloadData();
            //         console.log("Dashboard refreshed");
            //     }
            // }, 5000); // You can adjust the refresh interval as needed
        }


       
    </script>
</body>
</html>
