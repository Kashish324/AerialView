@* This is a default dashboard that opens in another window with application startup *@
@model List<DashboardDataModel>

@{
    ViewData["Title"] = "Dash Viewer";
    Layout = null;
    var titleToFileMap = ViewBag.TitleToFileMap as Dictionary<string, string>;
}

@using DevExpress.AspNetCore
@using DevExpress.DashboardWeb
@using DevExpress.DashboardAspNetCore

<!DOCTYPE html>
<html lang="en">
<head>
    <title>@ViewData["Title"] - AerialView-3.0</title>
    <link rel="stylesheet" href="/fonts/remixicon.css">
    <link rel="stylesheet" href="/lib/bootstrap.min.css" />
    <link rel="stylesheet" href="/fonts/remixicon.css">
    <link href="~/css/site.min.css" rel="stylesheet" />
    <link href="~/css/ace/ace.bundle.css" rel="stylesheet" />
    <script src="~/js/site.min.js"></script>
    <link href="~/css/dashboard.css" rel="stylesheet" />
    <link rel="icon" href="@Url.Content("~/33477137_AerialView-Logo-5.ico")">
</head>
<body>

    @{
        var hasdashDefault = Model.Any(i => i.DashDefault);
    }

    @if (!hasdashDefault)
    {
        @* default but only should come when no default dashboard is selected  *@
        <div class="text-center position-absolute top-50 start-50 translate-middle fw-medium text-primary-emphasis">
            <span class="d-block">No default dashboard is selected.</span>
            You can select your default dashboard <a href="/Submenu/DashConfig?parentMenu=Dashboard-Admin&submenu=Dash%20Configuration">here</a>.
        </div>
    }
    else
    {
        @foreach (var i in Model)
        {
            if (i.DashDefault == true)
            {
                if (i.DashPath != null)
                {

                    // Get the title from the database
                    var dashboardTitle = i.DashPath;

                   @*  // Use the title to get the corresponding file name
                    string mappedFileName = titleToFileMap != null && titleToFileMap.ContainsKey(dashboardTitle)
                    ? titleToFileMap[dashboardTitle]
                    : null; *@

                    // Use the title to get the corresponding file name
                    string mappedFileName = titleToFileMap != null
                    ? titleToFileMap.FirstOrDefault(kvp => kvp.Key.Contains(dashboardTitle)).Value
                    : null;



                    if (mappedFileName != null)
                    {
                        // removing the extension for dashboard viewer syntax
                        string FileNameOnly = mappedFileName.Substring(0, mappedFileName.LastIndexOf("."));
                        <div style="position: absolute; left:0;top:0px;right:0;bottom:0;">
                            @(
                                    Html.DevExpress().Dashboard("clientDashboardControl")
                                    .ControllerName("DefaultDashboard")
                                    .Width("100%")
                                    .Height("100%")
                                    .WorkingMode(WorkingMode.Viewer)
                                    .InitialDashboardId(FileNameOnly)
                                    .OnBeforeRender("onBeforeRender")
                                    )
                        </div>
                    }
                    else
                    {
                        <div class="text-center position-absolute top-50 start-50 translate-middle fw-medium text-danger">
                            Dashboard file not found for title: @dashboardTitle
                        </div>
                    }

                    @* string FileNameOnly = @i.DashPath.Substring(0, @i.DashPath.LastIndexOf("."));
                    <div style="position: absolute; left:0;top:0px;right:0;bottom:0;">
                        @(
                            Html.DevExpress().Dashboard("clientDashboardControl")
                            .ControllerName("DefaultDashboard")
                            .Width("100%")
                            .Height("100%")
                            .WorkingMode(WorkingMode.Viewer)
                            .InitialDashboardId(FileNameOnly)
                            .OnBeforeRender("onBeforeRender")
                            )
                    </div> *@
                }
            }
        }
    }
    <script src="/lib/bootstrap.bundle.min.js"></script>
    <script>
        var dashboardControl; // Declare globally

        function onBeforeRender() {
            // Initialize or capture the dashboard control
            dashboardControl = clientDashboardControl;


            setInterval(() => {
                if (dashboardControl) {
                    dashboardControl.reloadData();
                    // dashboardControl.refresh();
                    //console.log("Dashboard refreshed");
                }
            }, 5000);
        }
    </script>
   
</body>
</html>
